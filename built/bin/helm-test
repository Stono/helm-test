#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const fs = require("fs");
const path = require("path");
const app_1 = require("../lib/app");
const logger_1 = require("../lib/logger");
const version = JSON.parse(fs.readFileSync(path.join(__dirname, '../package.json')).toString()).version;
const logger = new logger_1.Logger({ namespace: 'helm-test' });
const app = new app_1.App();
const program = new commander_1.Command();
logger.info(`Welcome to helm-test v${version}!`);
const kubevalEnabled = process.env.HELM_TEST_KUBEVAL_ENABLED === 'true';
const kubevalVersion = process.env.HELM_TEST_KUBEVAL_KUBERNETES_VERSION;
const kubevalSchemaLocation = process.env.KUBEVAL_SCHEMA_LOCATION;
logger.info(`kubevalEnabled: ${kubevalEnabled}, kubevalVersion: ${kubevalVersion}, kubevalSchemaLocation: ${kubevalSchemaLocation}`);
program
    .version(version)
    .option('-w, --watch', 'Watch for file changes and re-run tests')
    .option('-h, --helm-binary <location>', 'location of the helm binary')
    .parse(process.argv);
logger.info('running tests...');
app
    .test(program.opts())
    .then(() => {
    return logger.info('helm-test completed successfully');
})
    .catch((err) => {
    logger.error('helm-test failed to complete');
    console.error(err.message);
    process.exit(1);
});
